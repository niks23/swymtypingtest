{"version":3,"sources":["components/atoms/Loader/Loader.js","components/atoms/Timer/Timer.js","components/atoms/Button/Button.js","components/molecules/FinalReport/FinalReport.js","components/atoms/Input/Input.js","components/atoms/Word/Word.js","components/molecules/TypingTest/TypingTest.js","data.js","components/atoms/Select/Select.js","components/molecules/TypingTimer/TestTimer.js","pages/HomePage/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","Timer","context","useContext","TypingTestContext","initialSeconds","time","initialMinutues","Math","floor","useState","minutes","setMinutes","seconds","setSeconds","loader","setLoader","useEffect","timerInterval","setInterval","clearInterval","setTimeout","setStep","style","opacity","startTimer","Button","children","type","onClick","clickHandler","FinalReport","wordPerMinutes","wordArr","length","typos","filter","item","score","toFixed","Input","value","changeHandler","onChange","Word","text","active","correct","words","wordsArr","split","i","j","random","shuffle","TypingTest","userInput","setUserInput","map","word","index","activeWordIndex","e","console","log","setStartTimer","endsWith","checkWord","trim","setActiveWordIndex","setWordArr","data","newResult","setScore","prevScore","inputChangeHandler","target","Select","options","setTimer","label","TestTimer","createContext","HomePage","setTime","step","Provider","renderComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+ZAYeA,EATA,WACX,OACI,sBAAKC,UAAU,SAAf,UACI,qBAAKA,UAAU,YACf,4DCsDGC,G,MAtDD,WACV,IAAMC,EAAUC,qBAAWC,GACrBC,EAAgC,GAAfH,EAAQI,KAAY,GACrCC,EAAkBC,KAAKC,MAAqB,GAAfP,EAAQI,KAAY,IACvD,EAA8BI,mBAASH,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAASL,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACN,IAAIC,EAAgBC,aAAY,WACxBN,EAAU,GACVC,EAAWD,EAAU,GAGT,IAAZA,IACgB,IAAZF,EACAS,cAAcF,IAEdN,EAAWD,EAAU,GACrBG,EAAW,MAIH,IAAZH,GAA6B,IAAZE,IACjBG,GAAU,GACVK,YAAW,WACPL,GAAU,GACVd,EAAQoB,QAAQ,KACjB,QAER,KAEH,OAAO,WACHF,cAAcF,OAYtB,OACI,sBAAKlB,UAAU,QAAQuB,MAAO,CAAEC,QAAUtB,EAAQuB,WAAiB,EAAJ,GAA/D,UACI,+CATY,IAAZd,GAA6B,IAAZE,EACV,gDAEA,uCAAUF,EAAV,IAAoBE,EAAU,GAAV,WAAmBA,GAAYA,KAQzDE,GAAU,cAAC,EAAD,SC9CRW,G,MANA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACRzB,EAAUC,qBAAWC,GAE3B,OAAO,wBAAQwB,KAAK,SAASC,QAAS3B,EAAQ4B,aAAvC,SAAsDH,MC4BlDI,G,MA7BK,WAChB,IAAM7B,EAAUC,qBAAWC,GACrB4B,EAAiB9B,EAAQ+B,QAAQC,OACjCC,EAAQjC,EAAQ+B,QAAQG,QAAO,SAAAC,GAAI,OAAa,IAATA,KAAgBH,OAa7D,OACI,sBAAKlC,UAAU,cAAf,UACI,sBAAKA,UAAU,SAAf,UACI,yCAAW,iCAASgC,OACpB,2CAAa,iCAASG,OACtB,2CAAa,iCAASjC,EAAQoC,WAC9B,8CAAgB,mCAhBpBpC,EAAQ+B,QAAQC,OAAS,GACJhC,EAAQ+B,QAAQG,QAAO,SAAAC,GAAI,OAAa,IAATA,KAAeH,OAChDhC,EAAQ+B,QAAQC,OACa,KAAKK,QAAQ,GAGtD,EAUa,aAEpB,cAAC,EAAD,2B,cCpBGC,G,KAND,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cACpB,OACI,uBAAOd,KAAK,OAAOa,MAAOA,EAAOE,SAAUD,MCapCE,G,MAhBF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OAAgB,IAAZA,EACO,uBAAM/C,UAAU,UAAhB,UAA2B6C,EAA3B,QAGK,IAAZE,EACO,uBAAM/C,UAAU,YAAhB,UAA6B6C,EAA7B,OAGPC,EACO,uBAAM9C,UAAU,SAAhB,UAA0B6C,EAA1B,OAGJ,iCAAOA,EAAP,S,MCKX,IAAMG,EAXN,WAGI,IAFA,IAAMC,ECXU,iGDWMC,MAAM,KAEnBC,EAAIF,EAASf,OAAS,EAAGiB,EAAI,EAAGA,IAAK,CAC1C,IAAIC,EAAI5C,KAAKC,MAAMD,KAAK6C,UAAYF,EAAI,IADE,EAEb,CAACF,EAASG,GAAIH,EAASE,IAAnDF,EAASE,GAFgC,KAE5BF,EAASG,GAFmB,KAK9C,OAAOH,EAGGK,GAEDC,EAAa,WACtB,IAAMrD,EAAUC,qBAAWC,GAC3B,EAAkCM,mBAAS,IAA3C,mBAAO8C,EAAP,KAAkBC,EAAlB,KACA,EAA4B/C,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAqCA,OACI,sBAAKhB,UAAU,cAAf,UACI,4BACKgD,EAAMU,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CACIf,KAAMc,EAENb,OAAQc,IAAU1D,EAAQ2D,gBAC1Bd,QAAS7C,EAAQ+B,QAAQ2B,IAFpBA,QAOrB,cAAC,EAAD,CAAOnB,MAAOe,EAAWd,cAAe,SAACoB,GAAD,OAjDrB,SAACrB,GAMxB,GALKvC,EAAQ+B,QAAQC,SACjB6B,QAAQC,IAAI,SACZ9D,EAAQ+D,eAAc,IAGtBxB,EAAMyB,SAAS,KAAM,CACrB,IACMC,EADO1B,EAAM2B,SACQpB,EAAM9C,EAAQ2D,iBACzC3D,EAAQmE,oBAAmB,SAAAT,GAAK,OAAIA,EAAQ,KAE5C1D,EAAQoE,YAAW,SAAAC,GACf,IAAMC,EAAS,YAAOD,GAEtB,OADAC,EAAUtE,EAAQ2D,iBAAmBM,EAC9BK,KAGXL,EACMjE,EAAQuE,UAAS,SAAAC,GAAS,OAAIA,EAAY,MAC1CxE,EAAQuE,UAAS,SAAAC,GAAS,OAAIA,EAAY,KAE5CxE,EAAQ+B,QAAQC,SAAWc,EAAMd,OAAS,IAC1ClB,GAAU,GACVK,YAAW,WACPL,GAAU,GACVd,EAAQoB,QAAQ,KACjB,MAGPmC,EAAa,UAEbA,EAAahB,GAkBkCkC,CAAmBb,EAAEc,OAAOnC,UAC1E1B,GAAU,cAAC,EAAD,QE1EV8D,G,MAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf5E,EAAUC,qBAAWC,GAE3B,OACI,wBAAQqC,MAAOvC,EAAQI,KAAMqC,SAAUzC,EAAQ6E,SAA/C,SACKD,EAAQpB,KAAI,YAAuB,IAApBjB,EAAmB,EAAnBA,MAAOuC,EAAY,EAAZA,MACnB,OAAO,wBAAQvC,MAAOA,EAAf,SAAmCuC,GAARvC,UCL5CqC,G,MAAU,CACZ,CAAErC,MAAO,IAAKuC,MAAO,YACrB,CAAEvC,MAAO,IAAKuC,MAAO,YACrB,CAAEvC,MAAO,IAAKuC,MAAO,YACrB,CAAEvC,MAAO,IAAKuC,MAAO,YACrB,CAAEvC,MAAO,IAAKuC,MAAO,cAYVC,EATG,WACd,OACI,sBAAKjF,UAAU,aAAf,UACI,cAAC,EAAD,CAAQ8E,QAASA,IACjB,cAAC,EAAD,6BCVC1E,G,MAAoB8E,2BAEpBC,EAAW,WACpB,MAAwBzE,mBAAS,GAAjC,mBAAOJ,EAAP,KAAa8E,EAAb,KACA,EAAwB1E,mBAAS,GAAjC,mBAAO2E,EAAP,KAAa/D,EAAb,KACA,EAA8CZ,mBAAS,GAAvD,mBAAOmD,EAAP,KAAwBQ,EAAxB,KACA,EAA8B3D,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBqC,EAAhB,KACA,EAA0B5D,mBAAS,GAAnC,mBAAO4B,EAAP,KAAcmC,EAAd,KACA,EAAoC/D,oBAAS,GAA7C,mBAAOe,EAAP,KAAmBwC,EAAnB,KAgCA,OACI,cAAC7D,EAAkBkF,SAAnB,CACI7C,MAAO,CACHnC,OACAuD,kBACA5B,UACAK,QACAb,aACAsD,SAtCK,SAACjB,GACdsB,EAAQtB,EAAEc,OAAOnC,QAsCTX,aAnCS,WACJ,IAATuD,GACA/D,EAAQ,GAGC,IAAT+D,IACA/D,EAAQ,GACR8D,EAAQ,GACRd,EAAW,IACXD,EAAmB,KA2BfA,qBACAC,aACAG,WACAnD,UACA2C,iBAbR,SAgBI,sBAAKjE,UAAU,YAAf,UACI,6CACA,sBAAKA,UAAU,kBAAf,UACc,IAATqF,GAAc,cAAC,EAAD,IAjCP,SAACA,GACrB,OAAQA,GACJ,KAAK,EAML,QACI,OAAO,cAAC,EAAD,IALX,KAAK,EACD,OAAO,cAAC,EAAD,IACX,KAAK,EACD,OAAO,cAAC,EAAD,KA2BFE,CAAgBF,YCzDtBG,MARf,WACE,OACE,qBAAKxF,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0270add8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.scss';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <div className=\"spinner\"></div>\r\n            <span>Analyzing Results...</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react'\r\nimport { useContext } from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { TypingTestContext } from '../../../pages/HomePage/HomePage';\r\nimport Loader from '../Loader/Loader';\r\nimport './Timer.scss';\r\n\r\nconst Timer = () => {\r\n    const context = useContext(TypingTestContext);\r\n    const initialSeconds = context.time * 60 % 60;\r\n    const initialMinutues = Math.floor(context.time * 60 / 60);\r\n    const [minutes, setMinutes] = useState(initialMinutues);\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let timerInterval = setInterval(() => {\r\n            if (seconds > 0) {\r\n                setSeconds(seconds - 1);\r\n            }\r\n\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    clearInterval(timerInterval)\r\n                } else {\r\n                    setMinutes(minutes - 1);\r\n                    setSeconds(59);\r\n                }\r\n            }\r\n\r\n            if (minutes === 0 && seconds === 0) {\r\n                setLoader(true);\r\n                setTimeout(() => {\r\n                    setLoader(false);\r\n                    context.setStep(3);\r\n                }, 300)\r\n            }\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(timerInterval);\r\n        };\r\n    });\r\n\r\n    const getTimerData = () => {\r\n        if (minutes === 0 && seconds === 0) {\r\n            return <strong>Time Up!!!</strong>\r\n        } else {\r\n            return <strong> {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</strong>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"timer\" style={{ opacity: !context.startTimer ? 0 : 1 }}>\r\n            <span>Time Left: </span>\r\n            {getTimerData()}\r\n            {loader && <Loader />}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Timer;","import React, { useContext } from 'react'\r\nimport { TypingTestContext } from '../../../pages/HomePage/HomePage';\r\nimport './Button.scss';\r\n\r\nconst Button = ({ children }) => {\r\n    const context = useContext(TypingTestContext);\r\n\r\n    return <button type=\"button\" onClick={context.clickHandler}>{children}</button>\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react'\r\nimport { useContext } from 'react';\r\nimport { TypingTestContext } from '../../../pages/HomePage/HomePage';\r\nimport Button from '../../atoms/Button/Button';\r\nimport './FinalReport.scss';\r\n\r\nconst FinalReport = () => {\r\n    const context = useContext(TypingTestContext);\r\n    const wordPerMinutes = context.wordArr.length;\r\n    const typos = context.wordArr.filter(item => item === false).length;\r\n\r\n    const getAccuracy = () => {\r\n        if (context.wordArr.length > 0) {\r\n            const correctWords = context.wordArr.filter(item => item === true).length;\r\n            const totalWords = context.wordArr.length;\r\n            const accuracy = ((correctWords / totalWords) * 100).toFixed(2);\r\n            return accuracy;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"finalreport\">\r\n            <div className=\"report\">\r\n                <span>WPM: <strong>{wordPerMinutes}</strong></span>\r\n                <span>Typos: <strong>{typos}</strong></span>\r\n                <span>Score: <strong>{context.score}</strong></span>\r\n                <span>Accuracy: <strong>{getAccuracy()}%</strong></span>\r\n            </div>\r\n            <Button>Restart</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinalReport;","import React from 'react';\r\nimport './Input.scss';\r\nimport './Input.scss';\r\n\r\nconst Input = ({ value, changeHandler }) => {\r\n    return (\r\n        <input type=\"text\" value={value} onChange={changeHandler}></input>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './Word.scss';\r\n\r\nconst Word = ({ text, active, correct }) => {\r\n    if (correct === true) {\r\n        return <span className=\"correct\">{text} </span>\r\n    }\r\n\r\n    if (correct === false) {\r\n        return <span className=\"incorrect\">{text} </span>\r\n    }\r\n\r\n    if (active) {\r\n        return <span className=\"active\">{text} </span>\r\n    }\r\n\r\n    return <span>{text} </span>\r\n}\r\n\r\nexport default Word;","import React from 'react'\r\nimport { useContext } from 'react';\r\nimport { useState } from 'react/cjs/react.development'\r\nimport { data } from '../../../data';\r\nimport { TypingTestContext } from '../../../pages/HomePage/HomePage';\r\nimport Input from '../../atoms/Input/Input'\r\nimport Loader from '../../atoms/Loader/Loader';\r\nimport Word from '../../atoms/Word/Word';\r\nimport './TypingTest.scss';\r\n\r\nfunction shuffle() {\r\n    const wordsArr = data.split(' ');\r\n\r\n    for (let i = wordsArr.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [wordsArr[i], wordsArr[j]] = [wordsArr[j], wordsArr[i]];\r\n    }\r\n\r\n    return wordsArr;\r\n}\r\n\r\nconst words = shuffle();\r\n\r\nexport const TypingTest = () => {\r\n    const context = useContext(TypingTestContext);\r\n    const [userInput, setUserInput] = useState('');\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const inputChangeHandler = (value) => {\r\n        if (!context.wordArr.length) {\r\n            console.log(\"HELLO\");\r\n            context.setStartTimer(true);\r\n        }\r\n\r\n        if (value.endsWith(' ')) {\r\n            const word = value.trim();\r\n            const checkWord = word === words[context.activeWordIndex];\r\n            context.setActiveWordIndex(index => index + 1);\r\n\r\n            context.setWordArr(data => {\r\n                const newResult = [...data];\r\n                newResult[context.activeWordIndex] = checkWord;\r\n                return newResult;\r\n            })\r\n\r\n            checkWord\r\n                ? context.setScore(prevScore => prevScore + 10)\r\n                : context.setScore(prevScore => prevScore - 5)\r\n\r\n            if (context.wordArr.length === words.length - 1) {\r\n                setLoader(true);\r\n                setTimeout(() => {\r\n                    setLoader(false);\r\n                    context.setStep(3);\r\n                }, 300)\r\n            }\r\n\r\n            setUserInput(' ');\r\n        } else {\r\n            setUserInput(value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"typing-test\">\r\n            <p>\r\n                {words.map((word, index) => {\r\n                    return (\r\n                        <Word\r\n                            text={word}\r\n                            key={index}\r\n                            active={index === context.activeWordIndex}\r\n                            correct={context.wordArr[index]}\r\n                        />\r\n                    )\r\n                })}\r\n            </p>\r\n            <Input value={userInput} changeHandler={(e) => inputChangeHandler(e.target.value)} />\r\n            {loader && <Loader />}\r\n        </div>\r\n    )\r\n}\r\n","export const data = 'How Payment Crypto Solana Etherium Datastructures Algorithm Virtualdom Complexity Range Random';","import React, { useContext } from 'react';\r\nimport { TypingTestContext } from '../../../pages/HomePage/HomePage';\r\nimport './Select.scss';\r\n\r\nexport const Select = ({ options }) => {\r\n    const context = useContext(TypingTestContext);\r\n\r\n    return (\r\n        <select value={context.time} onChange={context.setTimer}>\r\n            {options.map(({ value, label }) => {\r\n                return <option value={value} key={value}>{label}</option>\r\n            })}\r\n        </select>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Button from '../../atoms/Button/Button';\r\nimport { Select } from '../../atoms/Select/Select';\r\nimport './TestTimer.scss';\r\n\r\nconst options = [\r\n    { value: '1', label: '1 Minute' },\r\n    { value: '2', label: '2 Minute' },\r\n    { value: '3', label: '3 Minute' },\r\n    { value: '4', label: '4 Minute' },\r\n    { value: '5', label: '5 Minute' }\r\n]\r\n\r\nconst TestTimer = () => {\r\n    return (\r\n        <div className=\"test-timer\">\r\n            <Select options={options} />\r\n            <Button>Start Test</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestTimer;","import React, { createContext, useState } from 'react'\r\nimport Timer from '../../components/atoms/Timer/Timer';\r\nimport FinalReport from '../../components/molecules/FinalReport/FinalReport';\r\nimport { TypingTest } from '../../components/molecules/TypingTest/TypingTest';\r\nimport TestTimer from '../../components/molecules/TypingTimer/TestTimer';\r\nimport './HomePage.scss';\r\n\r\nexport const TypingTestContext = createContext();\r\n\r\nexport const HomePage = () => {\r\n    const [time, setTime] = useState(1);\r\n    const [step, setStep] = useState(1);\r\n    const [activeWordIndex, setActiveWordIndex] = useState(0);\r\n    const [wordArr, setWordArr] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [startTimer, setStartTimer] = useState(false);\r\n\r\n    const setTimer = (e) => {\r\n        setTime(e.target.value);\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        if (step === 1) {\r\n            setStep(2);\r\n        }\r\n\r\n        if (step === 3) {\r\n            setStep(1);\r\n            setTime(1);\r\n            setWordArr([]);\r\n            setActiveWordIndex(0);\r\n        }\r\n    }\r\n\r\n    const renderComponent = (step) => {\r\n        switch (step) {\r\n            case 1:\r\n                return <TestTimer />\r\n            case 2:\r\n                return <TypingTest />\r\n            case 3:\r\n                return <FinalReport />\r\n            default:\r\n                return <TestTimer />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TypingTestContext.Provider\r\n            value={{\r\n                time,\r\n                activeWordIndex,\r\n                wordArr,\r\n                score,\r\n                startTimer,\r\n                setTimer,\r\n                clickHandler,\r\n                setActiveWordIndex,\r\n                setWordArr,\r\n                setScore,\r\n                setStep,\r\n                setStartTimer,\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <h1>Typing Test</h1>\r\n                <div className=\"content-wrapper\">\r\n                    {step === 2 && <Timer />}\r\n                    {renderComponent(step)}\r\n                </div>\r\n            </div>\r\n        </TypingTestContext.Provider >\r\n    )\r\n}\r\n","import './App.scss';\nimport { HomePage } from './pages/HomePage/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}